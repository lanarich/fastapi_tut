from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram import F
from keyboards.inline import place_kb
from aiogram import Router
import httpx
import json
from state.prediction import com3, com4, com5, com6

router_command = Router()

base_url = "http://fastapi_service:5555"


@router_command.message(F.text == "üêï –í—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É üêà‚Äç‚¨õ")
async def start_predict_items(message: Message):
    await message.answer(f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',reply_markup=place_kb())

@router_command.callback_query(F.data.startswith('set'))
async def select_mark(call: CallbackQuery, state: FSMContext):
    com = call.data.split(':')[1]
    
    if com == "1":
        response_get = httpx.get(f"{base_url}/")
        answer = json.dumps(response_get.json(), indent=1)     
        await call.message.answer(answer, reply_markup=place_kb())
    elif com == "2":
        response_get = httpx.post(f"{base_url}/post")
        answer = json.dumps(response_get.json(), indent=1)     
        await call.message.answer(answer, reply_markup=place_kb())
        
    elif com == "3":
        await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ 3-—Ö –ø–æ—Ä–æ–¥:\n'
                              '1. terrier\n'
                              '2. bulldog\n'
                              '3. dalmatian\n')
        await state.set_state(com3.post_1)
        
        @router_command.message(com3.post_1)
        async def get_dog_2(message: Message):
            response_get = httpx.get(f"{base_url}/dog?kind={message.text}")
            answer = json.dumps(response_get.json(), indent=1)     
            await message.answer(answer, reply_markup=place_kb())
        
        
            
    elif com == "4":
        await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Å–æ–±–∞–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>json</b> –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ:\n\n'
                          '{\n'
                          '    "name": "string",\n'
                          '    "pk": 0,\n'
                          '    "kind": "terrier"\n'
                          '}\n')
        await state.set_state(com4.post_1)
        
        @router_command.message(com4.post_1)
        async def post_dog(message: Message):
            data_input = message.text
            response_post = httpx.post(f"{base_url}/dog", json = json.loads(data_input))
            await message.answer(f'–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!', reply_markup=place_kb())
        
        
           
    elif com == "5":
        await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ <b>pk</b> —Å–æ–±–∞–∫–∏ –Ω–∏–∂–µ')
        await state.set_state(com5.post_1)
        
        @router_command.message(com5.post_1)
        async def get_dog_pk(message: Message):
            response_get = httpx.get(f"{base_url}/dog/{message.text}")
            answer = json.dumps(response_get.json(), indent=1)     
            await message.answer(answer, reply_markup=place_kb())
        
        
    elif com == "6":
        await call.message.answer(f'–í–≤–µ–¥–∏—Ç–µ <b>pk</b> —Å–æ–±–∞–∫–∏, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å')
        await state.set_state(com6.post_1)
        
        @router_command.message(com6.post_1)
        async def patch_dog_pk(message: Message, state: FSMContext):
            await state.update_data(post_1 = message.text)
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∞–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>json</b> –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ:\n\n'
                          '{\n'
                          '    "name": "string",\n'
                          '    "pk": 0,\n'
                          '    "kind": "terrier"\n'
                          '}\n')
            await state.set_state(com6.post_2)
        
        
        @router_command.message(com6.post_2)
        async def patch_dog_info(message: Message, state: FSMContext):
            await state.update_data(post_2 = message.text)
            data = await state.get_data()
            response_get = httpx.patch(f"{base_url}/dog/{data['post_1']}", json = json.loads(data['post_2']))
            await message.answer(f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', reply_markup=place_kb())
    
    